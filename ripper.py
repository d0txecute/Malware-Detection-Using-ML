'''
Authors:
- d0txecute

Project:
- Malware Analysis using Machine Learning

License:
- MIT License

Resources:
- https://github.com/qilingframework/rootfs
'''
#!/usr/bin/python3

import pefile
import os
import capstone
from config.colours import (error, exception_error, process, success, separator, help_table, console)

path = "payloads"
files = os.listdir(path)

for index, file in enumerate(files):
    print(f"[{index}]: {file}")

while True:
    try:
        selected_index = int(input("\nEnter the number of the file you want to analyze: "))
        if 0 <= selected_index < len(files):
            break
        else:
            error("Invalid index. Please enter a valid number.")
    except ValueError:
        exception_error("Invalid input. Please enter a number.")

selected_file = files[selected_index]
malpath = os.path.join(path, selected_file)
pe = pefile.PE(malpath)


def pe_sections():
    process("Displaying Sections:\n")
    success(f"Entry point: {hex(pe.OPTIONAL_HEADER.AddressOfEntryPoint)}")
    for section in pe.sections:
        success(section.Name)
        success(hex(section.VirtualAddress))
        success(hex(section.Misc_VirtualSize),)
        success(section.SizeOfRawData)
    separator()


def pe_imports():
    process("Displaying Imports:\n")
    for entry in pe.DIRECTORY_ENTRY_IMPORT:
        success(entry.dll)
        for function in entry.imports:
            success(f"\t{function.name=}")
    separator()

def help():
    """Commands Menu
    :return:
    """
    help_table.add_column("Command", justify="center", style="bold blue")
    help_table.add_column("Option", justify="center", style="bold blue")
    help_table.add_column("Arguments", justify="center", style="bold blue")
    help_table.add_column("Description", justify="center", style="bold blue")
    
    help_table.add_row("help", "", "", "Shows the help menu")
    help_table.add_row("quit", "", "", "Exits the program")
    help_table.add_section()
    help_table.add_row("PE", "Section", "", "Prints the PE Sections")
    help_table.add_row("PE", "Imports", "", "Prints the PE Imports")
    help_table.add_section()
    console.print(help_table)


def menu():
    while True:
        option = input("Option: ").lower()
        if option in ["q", "quit"]:
            break
        if option in ["h", "help"]:
            help()
        if option.split(" ")[0] in "pe":
            if option.split(" ")[1] in "section":
                pe_sections()
            elif option.split(" ")[1] in "imports":
                pe_imports()
    # capstone


def run():
    menu()

if __name__ == "__main__":
    process(f"Analyzing PE file: {selected_file}\n")
    separator()
    run()