import re
import numpy
import os
import pickle
import sklearn
from sklearn import tree


def get_string_features(path,hasher):
    # extract strings from binary file using regular expressions
    chars = r" -~"
    min_length = 5
    string_regexp = '[%s]{%d,}' % (chars, min_length)
    file_object = open(path)
    data = file_object.read()
    pattern = re.compile(string_regexp)
    strings = pattern.findall(data)
    # store string features in dictionary form
    string_features = {}

    for string in strings:
        string_features[string] = 1
        # hash the features using the hashing trick
        hashed_features = hasher.transform([string_features])
        # do some data munging to get the feature array
        hashed_features = hashed_features.todense()
        hashed_features = numpy.asarray(hashed_features)
        hashed_features = hashed_features[0]
        # return hashed string features
        print("Extracted {0} strings from {1}".format(len(string_features),path))
        return hashed_features


def get_training_data(benign_path,malicious_path,hasher):
    def get_training_paths(directory):
        targets = []
        for path in os.listdir(directory):
            targets.append(os.path.join(directory,path))
        return targets
    malicious_paths = get_training_paths(malicious_path)
    benign_paths = get_training_paths(benign_path)
    X = [get_string_features(path,hasher)
    for path in malicious_paths + benign_paths]
    y = [1 for i in range(len(malicious_paths))]
    + [0 for i in range(len(benign_paths))]
    return X, y
def train_detector(X,y,hasher):
    classifier = tree.RandomForestClassifier()
    classifier.fit(X,y)
    pickle.dump((classifier,hasher),open("saved_detector.pkl","w+"))