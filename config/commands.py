import subprocess
import os
import pefile
from capstone import *

from config.colours import (
    exception_error,
    console,
    error,
    process,
    help_table,
    quit_input
)

from tools.petools import pe_tools
from tools.capstone import disassemble
from tools.networkviz import network_viz

def select_path(path):
    if os.path.isdir(path):
        files = os.listdir(path)
        try:
            for index, file in enumerate(files):
                print(f"[{index}]: {file}")

            while True:
                try:
                    selected_index = int(input("\nEnter file number: "))
                    if 0 <= selected_index < len(files):
                        break
                    else:
                        error("Invalid index. Please enter a valid number.")
                except ValueError:
                    exception_error("Invalid input. Please enter a number.")

            selected_file = files[selected_index]
            malpath = os.path.join(path, selected_file)

            print("")
            process(f"Analyzing PE file: [green]{selected_file}[/green]\n")

        except Exception:
            pass

    elif os.path.isfile(path):
        malpath = path
        process(f"Analyzing PE file: [green]{selected_file}[/green]\n")

    pe = pefile.PE(malpath)
    return pe

def select_file():
    path = console.input("[cornflower_blue]Enter payload path: [/cornflower_blue]")
    return path


# Misc
def menu():
    """Program Menu"""
    pe = select_path(select_file())
    pe_sections, pe_imports = pe_tools(pe)
    try:
        disassembler = Cs(CS_ARCH_X86, CS_MODE_64)
    except Exception as e:
        exception_error(e)

    while True:
        try:
            option = console.input("[royal_blue1]ðŸ”¬ RIP: [/royal_blue1]").lower()

            if option.split(" ")[0] in "pe":
                if option.split(" ")[1] in "sections":
                    pe_sections()

                elif option.split(" ")[1] in "imports":
                    pe_imports()

            if option.split(" ")[0] in "network":
                if option.split(" ")[1] in "viz":
                    network_viz()

            if option.split(" ")[0] in "arch":
                if option.split(" ")[1] in "current":
                    # Display current syntax
                    pass
                elif option.split(" ")[1] in "syntax":
                    # Select an arch (X86, ARM, etc.)
                    pass
                elif option.split(" ")[1] in "mode":
                    # Select an arch (16b, 32b, 64b)
                    pass

            match option.strip():
                case ("q" | "quit" | "exit"):
                    quit_program()

                case ("h" | "help"):
                    help_menu()

                case ("cls" | "clear"):
                    clear()

                case ("file"):
                    select_path(select_file())

                case ("disas" | "disassemble"):
                    disassemble(pe, disassembler)

        except KeyboardInterrupt:
            quit_program()

        except IndexError:
            pass

        except Exception as e:
            exception_error(e)


def clear():
    """Clear Screen"""
    try:
        (
            subprocess.run("cls", shell=True, stderr=subprocess.DEVNULL, check=False)
                or
            subprocess.run("clear", shell=True, stderr=subprocess.DEVNULL, check=False)
        )
    except Exception:
        pass


def help_menu():
    """Commands Menu
    :return:
    """
    help_table.add_column("Command", justify="center", style="bold blue")
    help_table.add_column("Option", justify="center", style="bold blue")
    help_table.add_column("Arguments", justify="center", style="bold blue")
    help_table.add_column("Description", justify="center", style="bold blue")

    help_table.add_row("file", "", "", "Select File for Analysis")
    help_table.add_row("clear", "", "", "Clear Screen")
    help_table.add_row("help | h", "", "", "Shows the help menu")
    help_table.add_row("quit | q", "", "", "Exits the program")
    help_table.add_section()

    help_table.add_row("PE", "Sections", "", "Prints the PE Sections")
    help_table.add_row("PE", "Imports", "", "Prints the PE Imports")
    help_table.add_section()

    help_table.add_row("Disas | Disassemble", "",
                       "", "Disassembles the binary and shows the assembly code")
    help_table.add_section()

    help_table.add_row("Network", "Viz", "", "Visualises Network Connections")
    help_table.add_section()

    console.print(help_table)


def quit_program():
    """Close program"""
    _quit = quit_input()
    if _quit not in ['no', 'n']:
        console.print("\nðŸ‘‹\t[cornflower_blue]Exiting Program[/cornflower_blue]")
        quit()
    else:
        pass
